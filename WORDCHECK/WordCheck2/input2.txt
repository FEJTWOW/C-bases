#include "pch.h" 
#include <iostream>
#include <stdio.h>
#include "Stack.h"
#include <math.h>
#include "DStack.h"

#define DOT '.'

void skipSpaces();
double getNum();
int isDigit( char c );
char getOper();
int isOper( char cOper );
int prior( char cOper );
double Calc( double arg1, double arg2, char cOperator );
double ONP();


int main(int argc, char* argv[])
{
	printf( "Podaj wyrazenie: " );
	printf( "\n\n %f", ONP() );

	return 0;
}
void skipSpaces()
{
	char c;
	while (( c = getchar() ) == ' ');
	ungetc( c, stdin );
}
double getNum()
{
	char c;
	double num = 0;
	int sign = 0;
	skipSpaces();
	//	( c = getchar() == '-' ) ? o=-1 : ungetc ( c, stdin );
	if (( c = getchar() ) == '+' || c == '-')
	{
		if (c == '-') sign = -1;
	}
	else ungetc( c, stdin );
	cout << " Wypisanie z getNum : " << c << endl;
	
	while ( isDigit ( c = getchar() ))
		num = num * 10 + ( c - '0' );
	if ( c == DOT )
	{
		double coef = 0.1;
		while ( isDigit ( c = getchar() ))
		{
			num += ( c - '0' ) * coef;
			coef *= 0.1;
		}


	}
	ungetc( c, stdin );
	return ( sign ) ? -num : num;
}
int isDigit( char c )
{
	return ( c >= '0' ) && ( c <= '9' );
}
char getOper()
{
	skipSpaces();
	return getchar();
}
int isOper( char cOper )
{
	switch ( cOper )
	{
	case '(':
	case ')':
	case '+':
	case '-':
	case '*':
	case '/':
	case '^': return 1;
	}
	return 0;

}
int prior( char cOper )
{
	switch ( cOper )
	{
	case '+':
	case '-': return 1;
	case '*':
	case '/': return 2;
	case '^': return 3;
	}
	return 0;
}
double ONP()
{
	char c;
	StackItem* pStack = NULL;
	makeEmptyStack( &pStack );
	DStackItem* pDStack = NULL;
	dmakeEmptyStack( &pDStack );

	dpush( &pDStack, getNum() );

	while( isOper( c = getOper() ) )
	{
		cout << "wypisywanie wartosci: " << c << endl;
		if( c == '(' )
		{
			push( &pStack, c );
			dpush( &pDStack, getNum() );
		}
		else if( c==')' )
		{
			while( top( pStack )!='(' )
			{

				double arg2 = dpop( &pDStack );
				dpush( &pDStack, Calc( dpop( &pDStack ), arg2, pop( &pStack ) ) );

			}
			del( &pStack );
			continue;
		}
		else
		{
			while( prior( c )<=prior( top( pStack ) ) )
			{
				double arg2 = dpop( &pDStack );
				dpush( &pDStack, Calc( dpop( &pDStack ), arg2, pop( &pStack ) ) );
			}

			push( &pStack, c );
			if( ( c = getOper()=='(' ) )
			{
				push( &pStack, c );
				dpush( &pDStack, getNum() );


			}

			else
			{
				ungetc( c, stdin );
				dpush( &pDStack, getNum() );
			}

		}
		while( !isEmpty( pStack ) )
		{
			double arg2 = dpop( &pDStack );
			dpush( &pDStack, Calc( dpop( &pDStack ), arg2, pop( &pStack ) ) );
		}

		return dpop( &pDStack );

	}

}

double Calc( double arg1, double arg2, char cOperator )
{
	switch( cOperator )
	{
	case '+': return arg1 + arg2;
	case '-': return arg1 - arg2;
	case '*': return arg1 * arg2;
	case '/': if( fabs( arg2 > 1e-14 ) ) return arg1 / arg2;
		cout << "Error: division by 0!!\n";
		break;
	case '^': return pow( arg1, arg2 );
	}
	return 0;
}